#created on: Aug 31, 2009
package edu.ucsc.eis.mario

#list any import classes here.
import edu.ucsc.eis.mario.sprites.Mario
import edu.ucsc.eis.mario.events.* 
import edu.ucsc.eis.mario.level.Pit
import java.util.ArrayList
import java.util.Iterator
import function org.mockito.Mockito.* 


#declare any global variables here

declare Jump
    @role(event)
    @expires(5s)
end

declare Landing
    @role(event)
    @expires(1s)
end

# Test rules to make sure facts are inserted
rule "jumpEventFound"
    ruleflow-group "Test"
    when
        $jump : Jump()
    then
        System.err.println("Found a jump event: " + $jump);
end

rule "landingEventFound"
    ruleflow-group "Test"
    when
        $landing : Landing()
    then
        System.err.println("Found a landing event: " + $landing);
end

rule "levelSceneFound"
    ruleflow-group "Test"
    when
        $levelScene : LevelScene()
    then
        System.err.println("Found a level scene: " + $levelScene);
end

rule "levelFound"
    ruleflow-group "Test"
    when
        LevelScene($level : level)
    then
        System.err.println("Found a level: " + $level);
end

rule "pitFound"
    ruleflow-group "Test"
    when
        LevelScene($level : level)
        $pit : Pit() from $level.pits
    then
        System.err.println("Found a pit: " + $pit);
end

rule "marioFound"
    ruleflow-group "Test"
    when
        $mario : Mario()
    then
        //System.err.println("Mario art is: " + $mario.getSheet());
end

# Test interaction
rule "marioIsDucking"
    ruleflow-group "Test"
    when
        $mario : Mario()
        eval($mario.isDucking())
    then 
        System.err.println("Mario is ducking!");
end

# Book-keeping rules to ensure working agenda is valid from tick-to-tick
rule "Retract all jumps when a landing is found"
    ruleflow-group "Bookkeeping"
    when
        $landing : Landing()
        $jumps : ArrayList(size > 0) from collect(Jump())
    then
        for (Object jump : $jumps) {
            retract(jump);
        }
        
        retract($landing);
end

rule "Retract all landings"
    ruleflow-group "Bookkeeping"
    salience -1
    when
        $landing : Landing()
    then
        retract($landing);
end

# Integrity rules
rule "Stop Mario moving when he dies"
    ruleflow-group "Integrity"
    when
        $mario : Mario(deathTime == 1)
    then
        $mario.xa = 0;
        $mario.ya = 0;
end        

rule "stopMarioInteractionWhenDead"
    ruleflow-group "Integrity"
    when
        $mario : Mario(deathTime > 0)
    then
        $mario.keys = new boolean[16];
        System.err.println("Mario is dead");
end

/**
* This one will only work if a new fact is inserted, as updating Mario
* results in an implicit retraction and insertion, killing the activation
* for this rule. An immutable object (only need one, so the inserting rule
* should check for not(deathEvent())) could be inserted into the memory on the
* rules side instead, and the duration calculated on that.
*/
//rule "End level if Mario dies"
//    duration(1s)
//    when
//        $mario : Mario(deathTime > 0)
//    then
//        System.err.println("Mario should be dead now");
//end

/**
* This is a hard and fast parameter bug, but won't catch
* bugs that are caused by some other issue. For that, we'll
* need complex event processing, which is the next rule
*/

rule "marioTooHigh"
    ruleflow-group "Integrity"
    when
        $mario : Mario(jumpTime > 8)
    then
        System.err.println("Mario jumped too high");
        $mario.setJumpTime(-1);
        $mario.setYJumpSpeed(0);
end

//The window of time Mario jumped is too long
rule "marioJumpTooLong"
    ruleflow-group "Integrity"
    duration(2s)
    when
        $jump : Jump($mario : mario)
        not(Landing(this after[0s,2s] $jump))
    then
        System.err.println("Mario jumped too long");
        $mario.setJumpTime(-1);
        // 100 will bring Mario down *hard*
        $mario.setYJumpSpeed(100);
end

rule "pitTooLong"
    ruleflow-group "Integrity"
    when
        LevelScene($level : level)
        $pit : Pit((length > 4 && hasStairs == true) || 
            (length > 6 && hasStairs == false)) 
            from $level.pits
    then
        int requiredLength = 6;
        int requiredHeight = 1;
        
        if ($pit.hasStairs == true) { 
            requiredLength = 4;
            requiredHeight = 3; 
        }
        
        for (int x = $pit.getEndX(); x >= ($pit.getStartX() + requiredLength); x--) {
            $level.setBlock(x, $level.height - 1, (byte) (9 + 0 * 16));
            
            for (int y = 1; y <= requiredHeight; y++) {
                $level.setBlock(x, $level.height - y, (byte) (9 + 0 * 16)); 
            }
        }
        
        System.err.println("Found pit that is too long: " + $pit);
end

rule "marioAnimationSmall"
    ruleflow-group "Integrity"
    when
        $mario : Mario(sheet != Art.smallMario)
        eval($mario.isLarge() == false)
        eval($mario.isFire() == false)
    then
        $mario.sheet = Art.smallMario;
        System.err.println("Mario set to small art");
end

rule "marioAnimationLarge"
    ruleflow-group "Integrity"
    when
        $mario : Mario(sheet != Art.mario)
        eval($mario.isLarge() == true)
        eval($mario.isFire() == false)
    then
        $mario.sheet = Art.mario;
        System.err.println("Mario set to large art");
end

rule "marioAnimationFire"
    ruleflow-group "Integrity"
    when
        $mario : Mario(sheet != Art.fireMario)
        eval($mario.isFire() == true)
    then
        $mario.sheet = Art.fireMario;
        System.err.println("Mario set to fire art");
end


 
   